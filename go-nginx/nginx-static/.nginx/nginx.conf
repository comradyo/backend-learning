# https://nginx.org/en/docs/beginners_guide.html

# The way nginx and its modules work is determined in the configuration file. 
# By default, the configuration file is named nginx.conf and placed in the directory /usr/local/nginx/conf, 
# /etc/nginx, or /usr/local/etc/nginx.

# To start nginx, run the executable file. Once nginx is started, it can be controlled by invoking the executable 
# with the -s parameter. Use the following syntax:
# nginx -s signal
# Where signal may be one of the following:
#   stop — fast shutdown
#   quit — graceful shutdown
#   reload — reloading the configuration file
#   reopen — reopening the log files

# For example, to stop nginx processes with waiting for the worker processes to finish serving current requests, 
# the following command can be executed:
# nginx -s quit

# Configuration File’s Structure
# nginx consists of modules which are controlled by directives specified in the configuration file. 
# Directives are divided into simple directives and block directives. A simple directive consists of the name and 
# parameters separated by spaces and ends with a semicolon (';'). 
# A block directive has the same structure as a simple directive, but instead of the semicolon it ends with a set of 
# additional instructions surrounded by braces ('{' and '}'). 
# If a block directive can have other directives inside braces, it is called a context.

# Generally, the configuration file may include several server blocks distinguished by ports on which they 
# listen to and by server names. Once nginx decides which server processes a request, 
# it tests the URI specified in the request’s header against the parameters of the location directives defined 
# inside the server block.

server {

  # Порт, на котором слушает сервер статики
  listen 80;

  # Пример: 
  # location / {
  #    root /data/www;
  # }
  # This location block specifies the “/” prefix compared with the URI from the request. 
  # For matching requests, the URI will be added to the path specified in the root directive, that is, to /data/www, 
  # to form the path to the requested file on the local file system. 
  # If there are several matching location blocks nginx selects the one with the longest prefix. 
  # The location block above provides the shortest prefix, of length one, and so only if all other location blocks fail 
  # to provide a match, this block will be used.

  # location /images/ {
  #     root /data;
  # }
  # It will be a match for requests starting with /images/.
  # Location / also matches such requests, but has shorter prefix.

  # This is already a working configuration of a server that listens on the standard port 80 and is accessible on the 
  # local machine at http://localhost/. In response to requests with URIs starting with /images/, the server will send files 
  # from the /data/images directory. 
  # For example, in response to the http://localhost/images/example.png request nginx will send the /data/images/example.png file

  # If such file does not exist, nginx will send a response indicating the 404 error. Requests with URIs not starting with 
  # /images/ will be mapped onto the /data/www directory. For example, in response to the http://localhost/some/example.html 
  # request nginx will send the /data/www/some/example.html file.

  location / { # 
    root   /usr/share/nginx/html; # Видимо, статика копируется туда при описании docker файла
      # The root directive specifies the root directory that will be used to search for a file. 
      # To obtain the path of a requested file, NGINX appends the request URI to the path specified by the root directive.
    index  index.html index.htm;  # 
    try_files $uri /index.html =404;
  }

  # In this configuration:
    # The root directive specifies the directory where your static files are stored.
    # The index directive defines the default file to serve when a directory is accessed.
    # The try_files directive checks if the requested file exists; if not, it returns a 404 error.

  error_page   500 502 503 504  /50x.html;

  location = /50x.html {
    root   /usr/share/nginx/html;
  }
}

# Setting Up a Simple Proxy Server
# One of the frequent uses of nginx is setting it up as a proxy server, which means a server that receives requests, 
# passes them to the proxied servers, retrieves responses from them, and sends them to the clients.

server {
    listen 8080;
    root /data/up1;

    location / {
      
    }
}

# This will be a simple server that listens on the port 8080 (previously, the listen directive has not been specified since 
# the standard port 80 was used) and maps all requests to the /data/up1 directory on the local file system. 
# Create this directory and put the index.html file into it. 
# Note that the root directive is placed in the server context. 
# Such root directive is used when the location block selected for serving a request does not include its own root directive.

server {
    location / {
        proxy_pass http://localhost:8080;
    }

    location /images/ {
        root /data;
    }
}
